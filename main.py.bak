# main.py
import sys
import argparse
import os
from agent_core import build_agent, build_langgraph_agent, run_langgraph_agent

def run_once(agent, prompt: str, use_langgraph: bool = False):
    """Run the agent with a single prompt."""
    # Handle special terminal commands directly
    if prompt.strip().lower() == "clear":
        os.system("clear" if os.name == "posix" else "cls")
        return "Screen cleared"
    
    try:
        if use_langgraph:
            # LangGraph agent is already compiled, just run it
            result = run_langgraph_agent(agent, prompt)
        else:
            # Use invoke instead of run (deprecated)
            result = agent.invoke(prompt)["output"]
        return result
    except Exception as e:
        return f"Error: {str(e)}"

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Git-Terminal Assistant")
    parser.add_argument("--langgraph", "-l", action="store_true", help="Use LangGraph agent with retry capabilities")
    parser.add_argument("--interactive", "-i", action="store_true", help="Run in interactive mode")
    parser.add_argument("query", nargs="*", help="Query to run (if not in interactive mode)")
    args = parser.parse_args()

    # Determine if we're running in interactive mode
    interactive_mode = args.interactive or not args.query
    
    # Build appropriate agent
    print("Building agent...")
    if args.langgraph:
        agent = build_langgraph_agent()
        agent_type = "LangGraph"
    else:
        agent = build_agent()
        agent_type = "LangChain"
    print(f"{agent_type} agent ready!")
    
    # Command line or interactive mode
    if not interactive_mode:
        # Command line mode
        query = " ".join(args.query)
        print(f"Running with query: {query}")
        result = run_once(agent, query, use_langgraph=args.langgraph)
        print(result)
    else:
        # Interactive mode
        print(f"=== Interactive Git-Terminal Assistant ({agent_type}) ===")
        print("Type 'clear' to clear the screen")
        print("Type 'exit' or press Ctrl+C to quit")
        
        while True:
            try:
                user_input = input("\n> ")
                if user_input.strip().lower() in {"exit", "quit", "q"}:
                    print("Exiting. Goodbye!")
                    break
                    
                if not user_input.strip():
                    continue
                
                # For safety confirmation on specific actions
                if any(kw in user_input.lower() for kw in ["commit", "push", "rm -rf", "delete"]):
                    confirm = input(f"Você está tentando fazer uma operação potencialmente importante: '{user_input}'\nDeseja continuar? (s/N): ")
                    if confirm.lower() != 's':
                        print("Operação cancelada.")
                        continue
                    
                result = run_once(agent, user_input, use_langgraph=args.langgraph)
                print(result)
            except KeyboardInterrupt:
                print("\nInterrupted. Exiting...")
                break
            except EOFError:
                print("\nEOF detected. Exiting...")
                break
            except Exception as e:
                print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main() 